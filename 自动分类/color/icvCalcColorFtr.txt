#include "stdafx.h"
#include "icvCalcColorFtr.h"


/// <加载颜色模型>
long icvColor_Init(const char* modelpath) {
	unsigned char* colorName = new unsigned char[32768];
	if (colorName == NULL) {
		LOG(INFO) << "颜色模型内存开辟失败！";
		return -1;
	}

	FILE* readFile = fopen(modelpath, "r");
	if (NULL == readFile) {
		fclose(readFile);
		LOG(INFO) << "颜色模型:" << modelpath << "路径异常！";
		return -1;
	}

	int number = fread(colorName, sizeof(uchar), 32768, readFile);
	fclose(readFile);

	if (number != 32768) {
		LOG(INFO) << "颜色模型:" << modelpath << "参数异常！";
		delete [] colorName; colorName = NULL;
		return -1;
	}

	return long(colorName);
}

void icvColor_kmeans(Mat image, Mat& backMat, Mat& foreMat, Mat& lineMat) {
	int nHeight = image.rows;
	int nWidth  = image.cols;

	Mat data = Mat::zeros(nHeight * nWidth, 3, CV_32FC1);
	Mat label;

	/*int nCnt = 0;*/
	for (int i = 0, nCnt = 0; i < nHeight; i++) {
		for (int j = 0; j < nWidth; j++) {
			data.at<float>(nCnt, 0) = image.ptr<uchar>(i,j)[0];
			data.at<float>(nCnt, 1) = image.ptr<uchar>(i,j)[1];
			data.at<float>(nCnt, 2) = image.ptr<uchar>(i,j)[2];
			nCnt++;
		}
	}

	TermCriteria criteria;
	criteria.maxCount = 100;
	criteria.epsilon = cv::TermCriteria::EPS;
	kmeans(data, 3, label, criteria, 3, 2);

	int nLabelCnt[3] = {0};
	for (int i = 0; i < label.rows; i++) {
		nLabelCnt[label.at<int>(i, 0)]++;
	}

	int backValue, foreValue, lineValue;
	if (nLabelCnt[0] >= nLabelCnt[1] && nLabelCnt[1] >= nLabelCnt[2]) {
		backValue = 0;	lineValue = 1;	foreValue = 2;
	} else if (nLabelCnt[0] >= nLabelCnt[2] && nLabelCnt[2] >= nLabelCnt[1]) {
		backValue = 0;	lineValue = 2;	foreValue = 1;
	} else if (nLabelCnt[1] >= nLabelCnt[0] && nLabelCnt[0] >= nLabelCnt[2]) {
		backValue = 1;	lineValue = 0;	foreValue = 2;
	} else if (nLabelCnt[1] >= nLabelCnt[2] && nLabelCnt[2] >= nLabelCnt[0]) {
		backValue = 1;	lineValue = 2;	foreValue = 0;
	} else if (nLabelCnt[2] >= nLabelCnt[1] && nLabelCnt[1] >= nLabelCnt[0]) {
		backValue = 2;	lineValue = 1;	foreValue = 0;
	} else {
		backValue = 2;	lineValue = 0;	foreValue = 1;
	}

	backMat = Mat::zeros(nHeight, nWidth, CV_8UC1);
	foreMat = Mat::zeros(nHeight, nWidth, CV_8UC1);
	lineMat = Mat::zeros(nHeight, nWidth, CV_8UC1);

	/*nCnt = 0;	*/
	for (int i = 0, nCnt = 0; i < nHeight; i++) {
		for (int j = 0; j < nWidth; j++) {
			if (label.at<int>(nCnt, 0) == backValue) {
				backMat.at<uchar>(i,j) = 255;
			}
			if (label.at<int>(nCnt, 0) == foreValue) {
				foreMat.at<uchar>(i,j) = 255;
			}
			if (label.at<int>(nCnt, 0) == lineValue) {
				lineMat.at<uchar>(i,j) = 255;
			}

			nCnt++;
		}
	}

	cout<< "clustering over." <<endl;
}

void icvColor_calcFtr(long handle, Mat colorImg) {
	if (handle <= 0 || colorImg.empty() || colorImg.channels() != 3) {
		return;
	}

	/// <颜色模型>
	unsigned char* colorName = (unsigned char*)handle;

	Mat colorIndex = Mat::zeros(colorImg.rows, colorImg.cols, CV_8UC1);
	vector<int> vecInt;
	vecInt.resize(12);

	int edge = 25;
	for (int i = edge; i < colorImg.rows - edge; i++) {
		for (int j = edge; j < colorImg.cols - edge; j++) {
			Vec3b pix = colorImg.at<Vec3b>(i,j);

			int value = pix[0] / 8 * 1024 + pix[1] / 8 * 32 + pix[2] / 8;
			int index = colorName[value];
			colorIndex.at<uchar>(i,j) = index;
			if (index == 4) {
				vecInt[1]++;
			} else if (index == 7) {
				vecInt[9]++;
			} else {
				vecInt[index]++;
			}			
		}
	}

	vector<int>vecColorNum;
	vecColorNum.push_back(vecInt[1]);	/// <黑色>
	vecColorNum.push_back(vecInt[2]);	/// <蓝色>
	vecColorNum.push_back(vecInt[5]);	/// <绿色>
	vecColorNum.push_back(vecInt[9]);	/// <红色>
	vecColorNum.push_back(vecInt[10]);	/// <白色>
	int nIndex = 0;
	getMax(vecColorNum, nIndex);
	if (nIndex == 0) {
		cout<< "黑色" <<endl;
	} else if (nIndex == 1) {
		cout<< "蓝色" <<endl;
	} else if (nIndex == 2) {
		cout<< "绿色" <<endl;
	} else if (nIndex == 3) {
		cout<< "红色" <<endl;
	} else {
		cout<< "白色" <<endl;
	}
	cout<< nIndex <<endl;

	//imshow("src", colorImg);
	//waitKey();
	//return;

	/// <根据得到的颜色数进行统计>
	/// <实际颜色分为以下几种：白色（10）、黑色+灰色（1，4）、蓝色（2）、绿色（5），红色（7，9）>
	Mat whiMat = Mat::zeros(colorImg.rows, colorImg.cols, CV_8UC3);
	Mat blaMat = Mat::zeros(colorImg.rows, colorImg.cols, CV_8UC3);
	Mat bluMat = Mat::zeros(colorImg.rows, colorImg.cols, CV_8UC3);
	Mat greMat = Mat::zeros(colorImg.rows, colorImg.cols, CV_8UC3);
	Mat redMat = Mat::zeros(colorImg.rows, colorImg.cols, CV_8UC3);
	for (int i = 0; i < colorIndex.rows; i++) {
		for (int j = 0; j < colorIndex.cols; j++) {
			int index = colorIndex.at<uchar>(i,j);
			if (index == 10) {
				whiMat.at<Vec3b>(i,j) = Vec<uchar, 3>(255,255,255);
				continue;
			} 
			if (index == 1 || index == 4) {
				blaMat.at<Vec3b>(i,j) = Vec<uchar, 3>(255,255,0);
				continue;
			}
			if (index == 2) {
				bluMat.at<Vec3b>(i,j) = Vec<uchar, 3>(255,0,0);
				continue;
			}
			if (index == 5) {
				greMat.at<Vec3b>(i,j) = Vec<uchar, 3>(0,255,0);
				continue;
			}
			if (index == 7 || index == 9) {
				redMat.at<Vec3b>(i,j) = Vec<uchar, 3>(0,0,255);
				continue;
			}
		}
	}

	Mat tmp = whiMat.clone();
	tmp.push_back(blaMat);
	tmp.push_back(bluMat);
	tmp.push_back(greMat);
	tmp.push_back(redMat);

	LOG(INFO) << "over";
}



void icvColor_calcFtr(long handle, Mat colorImg, Mat maskImg, int& nColor) {
	if (handle <= 0 || 
		colorImg.empty() || colorImg.channels() != 3 || 
		maskImg.empty() || maskImg.channels() != 1) {
			return;
	}

	/// <颜色模型>
	unsigned char* colorName = (unsigned char*)handle;

	Mat colorIndex = Mat::zeros(colorImg.rows, colorImg.cols, CV_8UC1);
	vector<int> vecInt;
	vecInt.resize(12);

	int edge = 15;
	for (int i = edge; i < colorImg.rows - edge; i++) {
		for (int j = edge; j < colorImg.cols - edge; j++) {
			if (maskImg.at<uchar>(i,j) == 0) {
				continue;
			}

			Vec3b pix = colorImg.at<Vec3b>(i,j);

			int value = pix[0] / 8 * 1024 + pix[1] / 8 * 32 + pix[2] / 8;
			int index = colorName[value];
			colorIndex.at<uchar>(i,j) = index;
			if (index == 4) {
				vecInt[1]++;
			} else if (index == 7) {
				vecInt[9]++;
			} else {
				vecInt[index]++;
			}			
		}
	}

	vector<int>vecColorNum;
	vecColorNum.push_back(vecInt[1]);	/// <黑色>
	vecColorNum.push_back(vecInt[2]);	/// <蓝色>
	vecColorNum.push_back(vecInt[5]);	/// <绿色>
	vecColorNum.push_back(vecInt[9]);	/// <红色>
	vecColorNum.push_back(vecInt[10]);	/// <白色>
	int nIndex = 0;
	getMax(vecColorNum, nIndex);
	//if (nIndex == 0) {
	//	cout<< "黑色" <<endl;
	//} else if (nIndex == 1) {
	//	cout<< "蓝色" <<endl;
	//} else if (nIndex == 2) {
	//	cout<< "绿色" <<endl;
	//} else if (nIndex == 3) {
	//	cout<< "红色" <<endl;
	//} else {
	//	cout<< "白色" <<endl;
	//}
	nColor = nIndex;
}

/// <颜色模型释放>
void icvColor_UnInit(long& handle) {
	if (handle > 0) {
		unsigned char* colorName = (unsigned char*)handle;
		delete [] colorName;	colorName = NULL;
	}

	handle = 0;
}

/// <红色区域检测，对于代理人身份证核查与身份证核查，这两者之间的区别仅在于是否存在红色标记>
/// <对于税务登记证而言，国税和地税的区别仅在于红色标记>
bool icvFindRedRegion(Mat colorImg, Rect roi, int nThres){
	if (colorImg.channels() != 3 || colorImg.empty() 
		|| roi.x < 0 || roi.y < 0 || roi.br().x >= colorImg.cols || roi.br().y >= colorImg.rows) {
			return false;
	}

	int nRedRatio = 0;
	for (int row = roi.y; row < roi.br().y; row++) {
		for (int col = roi.x; col < roi.br().x; col++) {
			Vec3b pix = colorImg.at<Vec3b>(row, col);
			int b = pix[0], g = pix[1], r = pix[2];
			if (r + g + b) {
				float ratio = r * 1.0 / (r + g + b);
				if (ratio > 0.4f) {
					nRedRatio++;
				}
			}
		}
	}

	/// <红色区域存在与否的判决>
	if (nRedRatio > nThres) {
		return true;
	} else {
		return false;
	}
}