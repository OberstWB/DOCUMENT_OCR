#include "stdafx.h"
#include "icvCalcLogoFtr.h"
#include "opencv2/features2d/features2d.hpp"
#include "opencv2/calib3d/calib3d.hpp"

extern "C" {
#include "vl/sift.h"
};

//#pragma comment(lib, "vl.lib")
#pragma comment(lib, "libVlFeat.lib")
#pragma comment(lib, OPENCV("features2d"))
#pragma comment(lib, OPENCV("calib3d"))

//static const float DIST_RATIO_THRESH = 0.75F;
#define DIST_RATIO_THRESH  0.6

int noctaves = 3;
int nlevels  = 3;
int o_min	 = -1;

void icvExtractorSiftFtrBasedVlfeat(Mat grayImg, Mat& descriptorsMat, vector<Point2f>& keypointsQuery) {
	if (grayImg.empty() || grayImg.channels() > 1) {	 
		return;
	}

	int height = grayImg.rows;
	int width  = grayImg.cols;

	vl_sift_pix *imageData = new vl_sift_pix[height * width];
	for (int i = 0; i < height; i++) {
		for (int j = 0; j < width; j++) {
			imageData[i * width + j] = grayImg.at<uchar>(i, j);
		}
	}

	VlSiftFilt* siftFilt = vl_sift_new(width, height, noctaves, nlevels, o_min);
	int keyPoint = 0;
	int idx = 0;
	Point2f keyPointsQ;
	if (vl_sift_process_first_octave(siftFilt, imageData) != VL_ERR_EOF) {
		while (true) {
			vl_sift_detect(siftFilt);
			keyPoint += siftFilt->nkeys;

			VlSiftKeypoint *pKeyPoint = siftFilt->keys;
			for (int i = 0;i < siftFilt->nkeys; i++) {
				VlSiftKeypoint tmpKeyPoint = *pKeyPoint;
				pKeyPoint++;
				idx++;

				double angles[4];
				int angleCount = vl_sift_calc_keypoint_orientations(siftFilt, angles, &tmpKeyPoint);
				keyPointsQ.x = tmpKeyPoint.x;
				keyPointsQ.y = tmpKeyPoint.y;

				for (int j = 0; j < angleCount; j++)  {
					double tmpAngle = angles[j];
					float* fdescp = new float[128];
					try {
						vl_sift_calc_keypoint_descriptor(siftFilt, fdescp, &tmpKeyPoint, tmpAngle);
					} catch (...) {
						if (NULL != fdescp) {
							delete [] fdescp;	fdescp = NULL;							
						}
						if (imageData != NULL) {
							delete [] imageData; imageData = NULL;
						}
						if (siftFilt != NULL) {
							vl_sift_delete(siftFilt);
						}
						return;
					}
					keypointsQuery.push_back(keyPointsQ);
					Mat dptors = Mat(1, 128, CV_32FC1, fdescp);
					descriptorsMat.push_back(dptors);

					if (NULL != fdescp) {
						delete [] fdescp;	fdescp = NULL;							
					}
				}
			}
			if ( vl_sift_process_next_octave(siftFilt) == VL_ERR_EOF) {
				break;
			}
			keyPoint = 0;
		}
	}

	if (siftFilt != NULL) {
		vl_sift_delete(siftFilt);
	}
	if (imageData != NULL) {
		delete [] imageData; imageData = NULL;
	}
}


float siftmatch(const Mat& descriptQuery, vector<Point2f> keypointsQuery, 
				const Mat& descriptProbe, vector<Point2f> keypointsProbe,  
				int fpointsthre, vector<Point2f>&  matchltpoints) {
	if (descriptQuery.empty() || keypointsQuery.size() < fpointsthre || 
		descriptProbe.empty() || keypointsProbe.size() < fpointsthre) {
			return(0);
	}

	Mat H;
	vector<DMatch> fwdGoodMatches(0);
	vector<DMatch> bwdGoodMatches(0);	
	vector<Point2f> queryPoints(0), refPoints(0);
	int innerCount = 0;
	float similarity = 0;

	{	    
		vector < vector<DMatch> > fwdMatches;
		vector<Mat> fwdTrainDesc(0);
		Ptr<DescriptorMatcher> fwdFlannMatcher= DescriptorMatcher::create( "FlannBased" );

		fwdTrainDesc.push_back(descriptQuery);
		fwdFlannMatcher->clear();
		fwdFlannMatcher->add(fwdTrainDesc);
		fwdFlannMatcher->train();
		fwdFlannMatcher->knnMatch(descriptProbe, fwdMatches, 2);

		for (int i=0;i<descriptProbe.rows;++i) {
			if ( fwdMatches[i][0].distance/fwdMatches[i][1].distance < DIST_RATIO_THRESH ) {
				fwdGoodMatches.push_back(fwdMatches[i][0]);	
			}
		}

		fwdTrainDesc.clear();
		fwdFlannMatcher->clear();
	}

	{
		vector < vector<DMatch> > bwdMatches;
		vector<Mat> bwdTrainDesc(0);
		Ptr<DescriptorMatcher> bwdFlannMatcher= DescriptorMatcher::create( "FlannBased" );

		bwdTrainDesc.push_back(descriptProbe);
		bwdFlannMatcher->clear();
		bwdFlannMatcher->add(bwdTrainDesc);
		bwdFlannMatcher->train();
		bwdFlannMatcher->knnMatch(descriptQuery, bwdMatches, 2);

		for(int j =0;j<descriptQuery.rows;++j) {
			if(bwdMatches[j][0].distance/bwdMatches[j][1].distance < DIST_RATIO_THRESH) {
				bwdGoodMatches.push_back(bwdMatches[j][0]);
			}
		}
		bwdTrainDesc.clear();
		bwdFlannMatcher->clear();
	}

	if (fwdGoodMatches.size() < fpointsthre || bwdGoodMatches.size() < fpointsthre) {
		return 0;		
	}	

	for( size_t m = 0; m < fwdGoodMatches.size(); m++ ) {
		for( size_t n = 0; n < bwdGoodMatches.size(); n++ ) {
			if ( fwdGoodMatches[m].trainIdx == bwdGoodMatches[n].queryIdx && fwdGoodMatches[m].queryIdx == bwdGoodMatches[n].trainIdx ) {
				queryPoints.push_back(keypointsQuery[fwdGoodMatches[m].trainIdx]);
				refPoints.push_back(keypointsProbe[fwdGoodMatches[m].queryIdx]);
			}
		}
	}

	if (queryPoints.size() < fpointsthre) {
		return 0;
	}

	if (queryPoints.size() > 4) {
		Mat mask=Mat::zeros(0, queryPoints.size(), CV_8UC1);
		H = findHomography(queryPoints, refPoints, CV_RANSAC, 3.0, mask);
		innerCount = (int)sum(mask)(0);

		Point2f  matchltpoint(0);
		float minx =10000;
		float miny =10000;
		for (int i =0;i<queryPoints.size();i++) {
			if(i >= mask.cols)
				return 0;
			if (mask.at<uchar>(1,i)) {
				minx = min(minx,queryPoints[i].x);
				miny = min(minx,queryPoints[i].y);
			}
		}
		if (minx<10000) {
			matchltpoint.x = minx;
			matchltpoint.y = miny;
			matchltpoints.push_back(matchltpoint);
		}

		float minx1 =10000;
		float miny1 =10000;
		for (int i =0;i<refPoints.size();i++) {
			if (mask.at<uchar>(1,i)) {
				minx1 = min(minx1,refPoints[i].x);
				miny1 = min(minx1,refPoints[i].y);
			}
		}

		if (minx<10000) {
			matchltpoint.x = minx1;
			matchltpoint.y = miny1;
			matchltpoints.push_back(matchltpoint);
		}

		if (innerCount > fpointsthre) {
			return innerCount;
		} else {
			return 0;
		}
	} else if (queryPoints.size() > fpointsthre) {
		return queryPoints.size();		
	}
	return 0;
}