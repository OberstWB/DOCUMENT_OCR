#include "stdafx.h"
#include "libThresh.h"


namespace iThresh{

float getOtsuThresh(Mat gray, vector<Point> vPoint)
{
	if (vPoint.size() == 0)
	{
		return -1;
	}

	const int N = 256;
	int i, j, h[N] = {0};

	for (int i = 0; i < vPoint.size(); i++)
	{
		h[gray.at<uchar>(vPoint[i])]++;
	}

	float mu = 0, scale = 1./(vPoint.size());
	for( i = 0; i < N; i++ )
		mu += i*(float)h[i];

	mu *= scale;
	float mu1 = 0, q1 = 0;
	float max_sigma = 0, max_val = 0;

	for( i = 0; i < N; i++ )
	{
		float p_i, q2, mu2, sigma;

		p_i = h[i]*scale;
		mu1 *= q1;
		q1 += p_i;
		q2 = 1. - q1;

		if( std::min(q1,q2) < FLT_EPSILON || std::max(q1,q2) > 1. - FLT_EPSILON )
			continue;

		mu1 = (mu1 + i*p_i)/q1;
		mu2 = (mu - q1*mu1)/q2;
		sigma = q1*q2*(mu1 - mu2)*(mu1 - mu2);
		if( sigma > max_sigma )
		{
			max_sigma = sigma;
			max_val = i;
		}
	}

	return max_val;
}


void OtsuPart(Mat src, Mat& bw, vector<Point> vPoint, float thresh, int maxval, int type)
{
	int i = 0;
	uchar tab[256];
	switch( type )
	{
	case THRESH_BINARY:
		for( i = 0; i <= thresh; i++ )
			tab[i] = 0;
		for( ; i < 256; i++ )
			tab[i] = maxval;
		break;
	case THRESH_BINARY_INV:
		for( i = 0; i <= thresh; i++ )
			tab[i] = maxval;
		for( ; i < 256; i++ )
			tab[i] = 0;
		break;
	case THRESH_TRUNC:
		for( i = 0; i <= thresh; i++ )
			tab[i] = (uchar)i;
		for( ; i < 256; i++ )
			tab[i] = thresh;
		break;
	case THRESH_TOZERO:
		for( i = 0; i <= thresh; i++ )
			tab[i] = 0;
		for( ; i < 256; i++ )
			tab[i] = (uchar)i;
		break;
	case THRESH_TOZERO_INV:
		for( i = 0; i <= thresh; i++ )
			tab[i] = (uchar)i;
		for( ; i < 256; i++ )
			tab[i] = 0;
		break;
	default:
		CV_Error( CV_StsBadArg, "Unknown threshold type" );
	}

	for(i = 0; i < vPoint.size(); i++)
		bw.at<uchar>(vPoint[i]) = tab[src.at<uchar>(vPoint[i])];

}



/// 获取均值图像和标准差图像
int getMeanStd(Mat src, Mat& matMeanImage, Mat& matStdImage, const int nWinWidth, const int nWinHeigh)
{
	if(!src.data)
	{
		return -1;
	}

	if (src.channels()>1)
	{
		Mat matGrayImage;
		cvtColor(src,matGrayImage,CV_BGR2GRAY);
		matGrayImage.assignTo(src);
		matGrayImage.release();
	}

	Mat meanKernel = Mat::ones(nWinHeigh,nWinWidth,CV_64F)/(nWinHeigh*nWinWidth);
	src.convertTo(src,CV_64F);
	filter2D(src,matMeanImage,-1,meanKernel);	

	Mat matSquareImage(src.size(),CV_64F);
	pow(src,2,matSquareImage);

	Mat matSquareMeanImage,matMeanSquareImage;
	filter2D(matSquareImage,matSquareMeanImage,-1,meanKernel);	

	pow(matMeanImage, 2, matMeanSquareImage);
	pow(matSquareMeanImage - matMeanSquareImage, 0.5, matStdImage);

	return 0;
}

void niBlackThreshold( InputArray _src, OutputArray _dst, double maxValue,
        int type, int blockSize, double delta )
{
    // Input grayscale image
    Mat src = _src.getMat();
    CV_Assert(src.channels() == 1);
    CV_Assert(blockSize % 2 == 1 && blockSize > 1);
    type &= THRESH_MASK;

    // Compute local threshold (T = mean + k * stddev)
    // using mean and standard deviation in the neighborhood of each pixel
    // (intermediate calculations are done with floating-point precision)
    Mat thresh;
    {
        // note that: Var[X] = E[X^2] - E[X]^2
        Mat mean, sqmean, stddev;
        boxFilter(src, mean, CV_32F, Size(blockSize, blockSize), Point(-1,-1), true, BORDER_REPLICATE);
        src.copyTo(sqmean, CV_32F);
		boxFilter(sqmean, sqmean, CV_32F, Size(blockSize, blockSize), Point(-1,-1), true, BORDER_REPLICATE);
        sqrt(sqmean - mean.mul(mean), stddev);
        thresh = mean + stddev * static_cast<float>(delta);
        thresh.convertTo(thresh, src.depth());
    }

    // Prepare output image
    _dst.create(src.size(), src.type());
    Mat dst = _dst.getMat();
    CV_Assert(src.data != dst.data);  // no inplace processing

    // Apply thresholding: ( pixel > threshold ) ? foreground : background
    Mat mask;
    switch (type)
    {
    case THRESH_BINARY:      // dst = (src > thresh) ? maxval : 0
    case THRESH_BINARY_INV:  // dst = (src > thresh) ? 0 : maxval
        compare(src, thresh, mask, (type == THRESH_BINARY ? CMP_GT : CMP_LE));
        dst.setTo(0);
        dst.setTo(maxValue, mask);
        break;
    case THRESH_TRUNC:       // dst = (src > thresh) ? thresh : src
        compare(src, thresh, mask, CMP_GT);
        src.copyTo(dst);
        thresh.copyTo(dst, mask);
        break;
    case THRESH_TOZERO:      // dst = (src > thresh) ? src : 0
    case THRESH_TOZERO_INV:  // dst = (src > thresh) ? 0 : src
        compare(src, thresh, mask, (type == THRESH_TOZERO ? CMP_GT : CMP_LE));
        dst.setTo(0);
        src.copyTo(dst, mask);
        break;
    default:
        CV_Error( CV_StsBadArg, "Unknown threshold type" );
        break;
    }
}

/// 利用当前点与局部均值之间的差异进行二值化；
/// cur < mean*(1-thresh) ? 255 : 0.
/// 此处采用积分图的方式进行局部均值的计算，还可以采用其他方式进行计算
bool Binarization_Nokia(const Mat &src, Mat &dst, int r, int T)
{
	Mat tGrayImage = Mat::zeros(src.size(), CV_8UC1), sumImage;
	dst = Mat::zeros(src.size(), CV_8UC1);

	if (src.channels() == 3)
	{
		cvtColor(src, tGrayImage, CV_BGR2GRAY);
	}
	else
	{
		tGrayImage = src;
	}

	integral(tGrayImage, sumImage, -1);

	// perform thresholding
	for (int i=0; i<src.rows; i++)
	{
		for (int j=0; j<src.cols; j++)
		{
			int x1 = IVCLP(j - r, 0, src.cols - 1) + 1; 
			int x2 = IVCLP(j + r, 0, src.cols - 1) + 1;
			int y1 = IVCLP(i - r, 0, src.rows - 1) + 1; 
			int y2 = IVCLP(i + r, 0, src.rows - 1) + 1;

			/// 当前点与局部均值之间的关系进行二值化
			long sum = sumImage.at<int>(y2, x2) + sumImage.at<int>(y1, x1) - sumImage.at<int>(y2, x1) - sumImage.at<int>(y1, x2);
			int count = (x2 - x1 + 1) * (y2 - y1 + 1);

			/// cur < mean * 
			if ((count * tGrayImage.at<uchar>(i,j) * 100) < (sum * (100 - T)))
			{
				dst.at<uchar>(i,j) = 255;
			}
			else
			{
				dst.at<uchar>(i,j) = 0;
			}
		}
	}

	return true;
}

//
// gamma增强
int gamma_enhancement(Mat &gray, double beita)
{
	std::map<int, double> gamma_LUT;
	double min_val, max_val, mean_val;
	minMaxLoc(gray, &min_val, &max_val);

	for (int i = 0; i < 256; ++i)
	{
		gamma_LUT[i] = pow(255, 1-1/beita) * pow((i - min_val) * (255) / (max_val - min_val), 1/beita);
	}

	for (int i = 0; i < gray.rows; ++i)
	{
		for (int j = 0; j < gray.cols; ++j)
		{
			gray.at<uchar>(i, j) = gamma_LUT[gray.at<uchar>(i, j)];
		}
	}

	normalize(gray, gray, 0, 255, CV_MINMAX);
	return 0;
}

int Binarization_auto(Mat &_gray, Mat &bw, int var_val)
{
	Mat mean_mat, std_mat, gray;
	int thres_val;


	thres_val = threshold(_gray, bw, 200, 255, CV_THRESH_OTSU);
	meanStdDev(_gray,  mean_mat, std_mat, 255 - bw);
	double val_cur = std_mat.at<double>(0, 0);

	while(val_cur > var_val)
	{
		gray = Mat::ones(_gray.size(), _gray.type()) * thres_val;
		_gray.copyTo(gray, 255 - bw);
		thres_val = threshold(gray, bw, 200, 255, CV_THRESH_OTSU);
		meanStdDev(_gray,  mean_mat, std_mat, 255 - bw);
		val_cur = std_mat.at<double>(0, 0);
	}

	bw = 255 - bw;
	return 0;
}

int Binarization_GS(Mat &src, Mat &dst)
{
	Mat gray, matImage_bw;
	if (src.channels() == 4)
	{
		cvtColor(src, gray, CV_BGRA2GRAY);
	}
	else if(src.channels() == 3)
	{
		cvtColor(src, gray, CV_BGR2GRAY);
	}
	else
	{
		gray = src.clone();
	}

	gamma_enhancement(gray, 0.9);

	Binarization_auto(src, dst, 50);

	return 0;
}


bool Binarization_Sauvola(Mat matImage, Mat& matBW_image, const int nWindowWidth, const int nWindowHeight, const double k, const int nDivideR)
{
	if (matImage.channels()>1)
	{
		Mat matGrayImage;
		cvtColor(matImage,matGrayImage,CV_BGR2GRAY);
		matGrayImage.assignTo(matImage);
		matGrayImage.release();
	}

	Mat matMeanImage(matImage.size(),CV_64F),matStdImage(matImage.size(),CV_64F);
	getMeanStd(matImage,matMeanImage, matStdImage, nWindowWidth, nWindowHeight);

	Mat matThresImage;
	matThresImage = matMeanImage.mul((matStdImage / nDivideR - 1) * k + 1);
	matThresImage.convertTo(matThresImage,matImage.type());
	compare(matImage,matThresImage,matBW_image,CMP_GT);

	return true;
}


bool Binarization_Gatos(Mat matImage, Mat& matBW_image,	const int nWindowWidth, const int nWindowHeight,const double Q)
{
	if(!matImage.data)
		return -1;
	if (matImage.channels()>1)
	{
		Mat matGrayImage;
		cvtColor(matImage,matGrayImage,CV_BGR2GRAY);
		matGrayImage.assignTo(matImage);
		matGrayImage.release();
	}

	Mat matROI;
	Binarization_Sauvola(matImage, matROI, nWindowWidth, nWindowHeight, 0.2, 128);

	unsigned char nAvgBackground = unsigned char(sum(matImage & matROI)[0]/countNonZero(matROI));
	Mat matBackgroundImage = (matROI & matImage)+(~matROI & nAvgBackground);

	Mat matFilteredBackground;
	matBackgroundImage.assignTo(matFilteredBackground,CV_64F);

	GaussianBlur(matFilteredBackground,matFilteredBackground,Size(nWindowWidth,nWindowHeight),0);
	
	matFilteredBackground.assignTo(matBackgroundImage,CV_8U);

	Mat matForeBackDistance = (matBackgroundImage-matImage) & ~matROI;
	unsigned char nAvgDistance = unsigned char(sum(matForeBackDistance)[0]/countNonZero(~matROI));

	// original Gatos
	//Mat matThresImage = -matBackgroundImage/nAvgBackground/(1-P1)*4 + 2*(1+P1)/(1-P1);	
	//matThresImage.convertTo(matThresImage,CV_64F);
	//exp(matThresImage,matThresImage);
	//pow(matThresImage+1,-1,matThresImage);
	//matBackgroundImage.convertTo(matBackgroundImage,CV_64F);
	//matThresImage  = matBackgroundImage - (matThresImage*(1-P2)+P2)*Q*nAvgDistance;
	//matThresImage.convertTo(matThresImage,CV_8U);
	//imshow("ThresholdImage",matThresImage);

	Mat matThresImage = matFilteredBackground*(1 - 1./nAvgBackground*nAvgDistance*Q);
	matThresImage.convertTo(matThresImage,CV_8U);
	compare(matImage,matThresImage,matBW_image,CMP_GT);
	return 0;
}

// Dynamic thresholding of gray-level images.
// Bernsen J. ICPR, 1986.
bool Binarization_Bernsen(Mat src, Mat &dst, int nWinWidth, int nWinheight)
{
#define S 15
	if(!src.data)
	{
		return false;
	}

	Mat gray;
	if (src.channels()>1)
	{		
		cvtColor(src,gray,CV_BGR2GRAY);
	}
	else
	{
		gray = src.clone();
	}
	dst = Mat::zeros(gray.rows, gray.cols, gray.type());

	int width = gray.cols;
	int height = gray.rows;
	int nAvg = sum(gray)[0] / src.total();

	Mat matMax, matMin, matMed, matRange, ele = getStructuringElement(MORPH_RECT, Size(nWinWidth, nWinheight));
	erode(gray, matMin,ele);
	dilate(gray, matMax, ele);
	matMed = (matMin + matMax) / 2;
	matRange = matMax - matMin;

	for (int i = 0; i < gray.rows; i++)
	{
		for (int j = 0; j < gray.cols; j++)
		{
			int nMed = matMed.at<uchar>(i,j);
			if (matRange.at<uchar>(i,j) > S)
			{
				dst.at<uchar>(i,j) = gray.at<uchar>(i,j) > nMed ? 255 : 0;
			}
			else
			{
				dst.at<uchar>(i,j) = nMed > nAvg - S ? 255 : 0;
			}

		}
	}

#undef S

	return true;

}

int getThreshVal_Triangle( const Mat& _src )
{
    Size size = _src.size();
    int step = (int) _src.step;
    if( _src.isContinuous() )
    {
        size.width *= size.height;
        size.height = 1;
        step = size.width;
    }

    const int N = 256;
    int i, j, h[N] = {0};
    for( i = 0; i < size.height; i++ )
    {
        const uchar* src = _src.ptr() + step*i;
        
		j = 0;
        for( ; j <= size.width - 4; j += 4 )
        {
            int v0 = src[j], v1 = src[j+1];
            h[v0]++; h[v1]++;

            v0 = src[j+2]; v1 = src[j+3];
            h[v0]++; h[v1]++;
        }

        for( ; j < size.width; j++ )
            h[src[j]]++;
    }

    int left_bound = 0, right_bound = 0, max_ind = 0, max = 0;
    int temp;
    bool isflipped = false;

    for( i = 0; i < N; i++ )
    {
        if( h[i] > 0 )
        {
            left_bound = i;
            break;
        }
    }
    if( left_bound > 0 )
        left_bound--;

    for( i = N-1; i > 0; i-- )
    {
        if( h[i] > 0 )
        {
            right_bound = i;
            break;
        }
    }
    if( right_bound < N-1 )
        right_bound++;

    for( i = 0; i < N; i++ )
    {
        if( h[i] > max)
        {
            max = h[i];
            max_ind = i;
        }
    }

    if( max_ind-left_bound < right_bound-max_ind)
    {
        isflipped = true;
        i = 0, j = N-1;
        while( i < j )
        {
            temp = h[i]; h[i] = h[j]; h[j] = temp;
            i++; j--;
        }
        left_bound = N-1-right_bound;
        max_ind = N-1-max_ind;
    }

    int thresh = left_bound;
    double a, b, dist = 0, tempdist;

    /*
     * We do not need to compute precise distance here. Distance is maximized, so some constants can
     * be omitted. This speeds up a computation a bit.
     */
    a = max; b = left_bound - max_ind;
    for( i = left_bound + 1; i <= max_ind; i++ )
    {
        tempdist = a*i + b*h[i];
        if( tempdist > dist)
        {
            dist = tempdist;
            thresh = i;
        }
    }
    thresh--;

    if( isflipped )
        thresh = N-1-thresh;

    return thresh;
}

// copy from opencv3.0 threshold.cpp
bool Binarization_Tri(Mat _src, Mat& _dst)
{
	_dst=Mat::zeros(_src.rows,_src.cols,_src.type());
	int thresh = getThreshVal_Triangle(_src);
	int i;
	uchar maxval = 255;
	uchar tab[256];
	for( i = 0; i <= thresh; i++ )
		tab[i] = 0;
	for( ; i < 256; i++ )
		tab[i] = maxval;
	for( i = 0; i < _dst.rows; i++ )
	{
		const uchar* src = _src.ptr() + _src.step*i;
		uchar* dst = _dst.ptr() + _dst.step*i;

		int j = 0;
		for( ; j <= _dst.cols - 4; j += 4 )
		{
			uchar t0 = tab[src[j]];
			uchar t1 = tab[src[j+1]];

			dst[j] = t0;
			dst[j+1] = t1;

			t0 = tab[src[j+2]];
			t1 = tab[src[j+3]];

			dst[j+2] = t0;
			dst[j+3] = t1;
		}

		for( ; j < _dst.cols; j++ )
			dst[j] = tab[src[j]];
	}

	return true;
}

void Binarization_SDLC(Mat &src, Mat &dst)
{
	// 统计直方图
	int *pnHist = new int[256];	memset(pnHist, 0, sizeof(int) * 256);
	int *pnDist = new int[256]; memset(pnDist, 0, sizeof(int) * 256);

	for (int i = 0; i < src.rows; i++)
	{
		for (int j = 0; j < src.cols; j++)
		{
			pnHist[src.at<uchar>(i,j)]++;
		}
	}

	// 计算距离
	for (int i = 0; i < 256; i++)
	{
		int nValue = 0;
		for (int j = 0; j < 256; j++)
		{
			nValue += (i - j) * (i - j) * pnHist[j];
		}

		pnDist[i] = nValue;
	}

	// 得到最终的显著性图像
	dst = Mat::zeros(src.rows, src.cols, CV_32SC1);
	for (int i = 0; i < dst.rows; i++)
	{
		for (int j = 0; j < dst.cols; j++)
		{
			dst.at<int>(i,j) = pnDist[src.at<uchar>(i,j)];
		}
	}

	normalize(dst, dst, 0,255, CV_MINMAX, CV_8UC1);

	delete [] pnDist; pnDist = NULL;
	delete [] pnHist; pnHist = NULL;

}


int getThreshVal_Bgt(Mat _src, float fDeltaT)
{
	double minVal, maxVal;
	minMaxLoc(_src, &minVal, &maxVal);

	if (abs(minVal - maxVal) < FLT_EPSILON)
	{
		return minVal;
	}

	double fPreThresh, fCurThresh = (minVal + maxVal) / 2;

	do 
	{
		fPreThresh = fCurThresh;
		float fFore = 0, fBack = 0;
		int nCnt = 0;
		for (int i = 0; i < _src.rows; i++)
		{
			for (int j = 0; j < _src.cols; j++)
			{
				if (_src.at<uchar>(i,j) < fPreThresh)
				{
					fFore += _src.at<uchar>(i,j);
					nCnt++;
				}
				else
				{
					fBack += _src.at<uchar>(i,j);
				}
			}
		}

		fFore /= nCnt;
		fBack /= _src.total() - nCnt;

		fCurThresh = (fFore + fBack) / 2;

	} while (abs(fPreThresh - fCurThresh) > fDeltaT);

	return (fCurThresh + fPreThresh) / 2;

}

bool Binarization_BGT(Mat _src, Mat &_dst, float fDeltaT)
{
	_dst=Mat::zeros(_src.rows,_src.cols,_src.type());
	int thresh = getThreshVal_Bgt(_src, fDeltaT);
	int i;
	uchar maxval = 255;
	uchar tab[256];
	for( i = 0; i <= thresh; i++ )
		tab[i] = 0;
	for( ; i < 256; i++ )
		tab[i] = maxval;
	for( i = 0; i < _dst.rows; i++ )
	{
		const uchar* src = _src.ptr() + _src.step*i;
		uchar* dst = _dst.ptr() + _dst.step*i;

		int j = 0;
		for( ; j <= _dst.cols - 4; j += 4 )
		{
			uchar t0 = tab[src[j]];
			uchar t1 = tab[src[j+1]];

			dst[j] = t0;
			dst[j+1] = t1;


			t0 = tab[src[j+2]];
			t1 = tab[src[j+3]];

			dst[j+2] = t0;
			dst[j+3] = t1;
		}

		for( ; j < _dst.cols; j++ )
			dst[j] = tab[src[j]];
	}
	return true;
}

int* getHistFrmImage(Mat _src, int *h)
{
	int i,j;
	for( i = 0; i < _src.rows; i++ )
	{
		const uchar* src = _src.ptr() + _src.step*i;

		j = 0;
		for( ; j <= _src.cols - 4; j += 4 )
		{
			int v0 = src[j], v1 = src[j+1];
			h[v0]++; h[v1]++;

			v0 = src[j+2]; v1 = src[j+3];
			h[v0]++; h[v1]++;
		}

		for( ; j < _src.cols; j++ )
			h[src[j]]++;
	}

	return h;
}
int GetYenThreshold(int* HistGram)
{
	int threshold;
	int ih, it;
	double crit;
	double max_crit;
	double* norm_histo = new double[256]; /* normalized histogram */
	double* P1 = new double[256]; /* cumulative normalized histogram */
	double* P1_sq = new double[256];
	double* P2_sq = new double[256];

	int total = 0;
	for (ih = 0; ih < 256; ih++)
	{
		total += HistGram[ih];
	}

	for (ih = 0; ih < 256; ih++)
		norm_histo[ih] = (double)HistGram[ih] / total;

	P1[0] = norm_histo[0];
	for (ih = 1; ih < 256; ih++)
		P1[ih] = P1[ih - 1] + norm_histo[ih];

	P1_sq[0] = norm_histo[0] * norm_histo[0];
	for (ih = 1; ih < 256; ih++)
		P1_sq[ih] = P1_sq[ih - 1] + norm_histo[ih] * norm_histo[ih];

	P2_sq[256 - 1] = 0.0;
	for (ih = 256 - 2; ih >= 0; ih--)
		P2_sq[ih] = P2_sq[ih + 1] + norm_histo[ih + 1] * norm_histo[ih + 1];

	/* Find the threshold that maximizes the criterion */
	threshold = -1;
	max_crit = FLT_EPSILON;
	for (it = 0; it < 256; it++)
	{
		crit = -1.0 * ((P1_sq[it] * P2_sq[it]) > 0.0 ? log(P1_sq[it] * P2_sq[it]) : 0.0) + 2 * ((P1[it] * (1.0 - P1[it])) > 0.0 ? log(P1[it] * (1.0 - P1[it])) : 0.0);
		if (crit > max_crit)
		{
			max_crit = crit;
			threshold = it;
		}
	}
	return threshold;
}

bool Binarization_Yen(Mat src, Mat &dst)
{
	dst=Mat::zeros(src.rows,src.cols,src.type());
	int *pnHist = new int[256];
	memset(pnHist, 0, sizeof(int) * 256);
	pnHist = getHistFrmImage(src, pnHist);
	int nThres = GetYenThreshold(pnHist);

	for (int i = 0; i < src.rows; i++)
	{
		for (int j = 0; j < src.cols; j++)
		{
			dst.at<uchar>(i,j) = src.at<uchar>(i,j) > nThres ? 255 : 0;
		}
	}


	return true;
}

// Text localization, enhancement and binarization in multimedia documents.
// Wolf C,etc. ICPR, 2002.
// T(x,y) = (1-k)*u(x,y)+k*Imin+k*(u(x,y)-Imin)*sigma(x,y)/R
// k = 0.5, R = 128.Imin = min(src).
bool Binarization_Wolf(Mat src, Mat &dst, int nWindowWidth, int nWinHeight, double k, int R)
{
	if (!src.data)
	{
		return	false;
	}

	Mat gray;
	if (src.channels() != 1)
	{
		cvtColor(src, gray, COLOR_BGR2GRAY);
	}
	else
	{
		gray = src.clone();
	}

	Mat meanImg, stdImg, threshImg;
	getMeanStd(gray, meanImg, stdImg, nWindowWidth, nWinHeight);

	double minVal;
	minMaxLoc(gray, &minVal);

	threshImg = (1 - k) * meanImg + k * minVal + k * (meanImg - minVal).mul(stdImg) / R;
	
	//threshImg = meanImg + k * (meanImg - minVal) * (stdImg/maxVal - 1);
	
	threshImg.convertTo(threshImg,CV_8U);
	compare(gray,threshImg,dst,CMP_GT);

	return true;
}


// An introduction to digiital image processing.
// Niblack W.ktl 1986.
// T(x,y)=u(x,y)+k*sigma(x,y)
bool Binarization_Niblack(Mat src, Mat& dst,const int nWindowWidth, const int nWindowHeight,const double k)
{
	if(!src.data)
	{
		return false;
	}

	Mat gray;
	if (src.channels()>1)
	{		
		cvtColor(src,gray,CV_BGR2GRAY);
	}
	else
	{
		gray = src.clone();
	}

	Mat matMeanImage(gray.size(),CV_64F),matStdImage(gray.size(),CV_64F);

	if (getMeanStd(gray,matMeanImage,matStdImage,nWindowWidth,nWindowHeight)<0)
	{
		return false;
	}

	Mat matThresImage;
	matThresImage = matMeanImage + matStdImage * k;

	matThresImage.convertTo(matThresImage,gray.type());
	compare(gray, matThresImage, dst, CMP_GT);
	return true;
}

// Comparison of Niblack inspired binarization methods for ancient documents.
// KhuRshid K,etc. SPIE, 2009.
// T(x,y) = u(x,y)+k*sqrt(sum(src(i,j)^2-u(i,j)^2)/MN)
// k equal to Niblack.
bool Binarization_Nick(Mat src, Mat &dst, int nWindowWidth, int nWindowHeigh, double k)
{
	if(!src.data)
	{
		return false;
	}

	Mat gray;
	if (src.channels()>1)
	{		
		cvtColor(src,gray,CV_BGR2GRAY);
	}
	else
	{
		gray = src.clone();
	}
	Mat matMeanPattern = Mat::ones(nWindowHeigh,nWindowWidth,CV_64F)/nWindowHeigh/nWindowWidth, matMeanImage, matSqureImage, matMean2Image, threshImage;
	gray.convertTo(gray,CV_64F);
	filter2D(gray,matMeanImage,-1,matMeanPattern,Point(-1,-1),0,BORDER_REPLICATE);
	pow(matMeanImage, 2, matMean2Image);
	pow(gray, 2, matSqureImage);

	matMean2Image = matSqureImage - matMean2Image;
	filter2D(matMean2Image, matMean2Image, -1, matMeanPattern, Point(-1,-1),0,BORDER_REPLICATE);
	pow(matMean2Image,0.5,matMean2Image);
	threshImage = matMeanImage + k * matMean2Image;

	threshImage.convertTo(threshImage, CV_8U);
	gray.convertTo(gray, CV_8U);
	compare(gray, threshImage, dst, CMP_GT);

	return 	true;
}

// Contrast adaptive binarization of low quality document images.
// Fend M-L,etc. IEICE, 2004.
// T(x,y)=(1-alpha1)*u(x,y)+alpha2*[u(x,y)-Imin]*sigma(x,y)/Rs+alpha3*Imin.
// alpha1 ~ [0.1 0.2]; k1 ~ [0.15 0.25]; k2 ~ [0.01 ~0.05];gamma = 2;
// alpha2 = k1*[sigma(x,y)/Rs]^gamma; alpha3 = k2 * [sigma(x,y)/Rs]^gamma
// Imin ~ local min.
bool Binarization_Feng(Mat src, Mat &dst, int nWindowWidth, int nWindowHeight)
{
	if(!src.data)
	{
		return false;
	}

	Mat gray;
	if (src.channels()>1)
	{		
		cvtColor(src,gray,CV_BGR2GRAY);
	}
	else
	{
		gray = src.clone();
	}
	int nMinRadius = 3, nMaxRadius = 5;
	float alpha1 = 0.15;	// 0.1~0.2
	float k1 = 0.20;		// 0.15~0.25
	float k2 = 0.03;		// 0.01~0.05

	Mat matMean, matStd, matStdS, matMin;
	Mat ele = getStructuringElement(MORPH_RECT, Size(nMinRadius, nMinRadius));
	erode(gray, matMin, ele);
	matMin.convertTo(matMin, CV_64F);

	getMeanStd(gray, matMean, matStdS, nMaxRadius, nMaxRadius);
	getMeanStd(gray, matMean, matStd, nMinRadius, nMinRadius);

	Mat alpha2, alpha3;
	alpha2 = matStd.mul(1/matStdS);
	pow(alpha2, 2, alpha2);
	alpha3 = k2 * alpha2;
	alpha2 *= k1;

	Mat threshImg;
	threshImg = (1 - alpha1) * matMean + alpha2.mul(matMean - matMin).mul(matStd).mul(1/matStdS) + alpha3.mul(matMin);

	threshImg.convertTo(threshImg, CV_8U);
	compare(gray, threshImg, dst, CMP_GT);

	return true;

}


int getMaxValue_vector(vector<int> distence,int& position)
{
	int temp=0;
	for (int i=0;i<distence.size();i++)
	{
		if (temp<distence[i])
		{
			temp=distence[i];
			position=i;
		}

	}
	return temp;

}

/// 笔画宽度估计
int StrokesEstimation(Mat image)//输入为二值图像
{
	Mat gray=image.clone(); 
	Mat img_can;
	blur(gray,gray,Size(3,3));
	Canny(gray,img_can,150,100,3);
	vector<int> distence;
	for (int i=0;i<img_can.rows;i++)
	{
		int left=0;
		int right=0;
		vector<int> count;
		for (int j=1;j<img_can.cols-1;j++)
		{
			if (img_can.at<uchar>(i,j)==255 && img_can.at<uchar>(i,j-1)==0)
			{
				left=j;
				count.push_back(left);
			}
			if (img_can.at<uchar>(i,j)==0 && img_can.at<uchar>(i,j+1)==255)
			{
				right=j;
				count.push_back(right);
			}
		}
		int v_size=count.size();
		for (int m=0;m<v_size-3;m=m+4)
		{
			int dis=count[m+3]-count[m];
			distence.push_back(dis);
		}
	}
	int pos;
	int maxnum=getMaxValue_vector(distence,pos);
	vector<int> array_dis(maxnum+1);
	for (int i=0;i<distence.size();i++)
	{
		int v=distence[i];
		array_dis[v]++;
	}
	int m_dis=0;
	int maxdis=getMaxValue_vector(array_dis,m_dis);
	return m_dis;

}

bool Binarization_LMM(Mat src, Mat &dst,int radius)
{
	dst=Mat::zeros(src.rows,src.cols,src.type());
	int nWin = 2 * radius + 1/*, nThres = 2 * radius + 1*/;
	Mat ele = getStructuringElement(MORPH_RECT, Size(nWin,nWin));
	Mat minSrc, maxSrc, otsuRef;
	//计算局部最大值和局部最小值
	dilate(src, maxSrc, ele);
	erode(src, minSrc, ele);
	//对比度计算和Otsu
	maxSrc.convertTo(maxSrc, CV_32F);
	minSrc.convertTo(minSrc, CV_32F);
	otsuRef = (maxSrc - minSrc).mul( 1.0 / (maxSrc + minSrc + FLT_EPSILON));
	normalize(otsuRef, otsuRef, 0,255, CV_MINMAX, CV_8U);
	threshold(otsuRef,otsuRef,CV_THRESH_OTSU,255,CV_THRESH_OTSU);
	otsuRef = otsuRef / 255;
	
	//笔画宽度估计和局部二值化
	int stroke =StrokesEstimation(src);
	int nThres=(2*stroke+1)*1.5;
	int window=2*stroke+1;
	for (int i = window; i < src.rows - window; i++)
	{
		for (int j = window; j < src.cols - window; j++)
		{
			Mat tmpROI = otsuRef(Range(i - window, i + window + 1), Range(j - window, j + window + 1));
			int t = sum(tmpROI)[0];
			if (t < nThres)
			{
				dst.at<uchar>(i,j) = 0;
				continue;
			}
			else
			{
				Mat tmpSrc = src(Range(i - window, i + window + 1), Range(j - window, j + window + 1));
				tmpSrc.convertTo(tmpSrc, CV_32F);
				tmpROI.convertTo(tmpROI, CV_32F);

				Mat ttt = tmpROI.mul(tmpSrc);
				float fMean = sum(ttt)[0] / t;

				tmpSrc = tmpSrc - fMean;
				pow(tmpSrc, 2, tmpSrc);
				tmpSrc = tmpSrc.mul(tmpROI);
				float fStd = sqrt(sum(tmpSrc)[0] / t);

				if (src.at<uchar>(i,j) <= fMean + fStd / 2)
				{
					dst.at<uchar>(i,j) = 255;
				}
				else
				{
					dst.at<uchar>(i,j) = 0;
				}
			}

		}
	}

	return true;
}

bool Binarization_OstuNiblack(Mat src, Mat &dst)
{
	Mat ostu, niblack;

	// otsu
	threshold(src, ostu, 0, 255, CV_THRESH_OTSU | CV_THRESH_BINARY_INV);

	vector<vector<Point>> contours;
	findContours(ostu.clone(), contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE);
	
	if (contours.size())
	{
		for (int i = 0; i < contours.size(); i++)
		{
			Rect cBoundingBox = boundingRect(contours[i]);

			if ((cBoundingBox.width <=2 && cBoundingBox.height <=2))
			{
				Point2f pt;
				double dbRet;

				for (int m=cBoundingBox.x; m<cBoundingBox.x+cBoundingBox.width; m++ )
				{
					for (int n=cBoundingBox.y; n<cBoundingBox.y+cBoundingBox.height; n++ )
					{
						ostu.at<uchar>(n,m) = 0;						
					}
				}
			}
		}
	}

	// niblack
	int r = 5;
	Binarization_Niblack(src, niblack, r, r, 0.1);
	niblack = 255 - niblack;

	// 以ostu为种子点，对niblack进行漫水。
	dst = ostu.clone();

	// combine otsu + niblack.
	for (int i = 1; i < src.rows - 1; i++)
	{
		for (int j = 1; j < src.cols - 1; j++)
		{
			if (niblack.at<uchar>(i,j))
			{
				if (ostu.at<uchar>(i - 1, j - 1) || ostu.at<uchar>(i - 1, j) || ostu.at<uchar>(i - 1, j + 1)
					|| ostu.at<uchar>(i, j - 1) || ostu.at<uchar>(i, j) || ostu.at<uchar>(i, j + 1)
					|| ostu.at<uchar>(i + 1, j - 1) || ostu.at<uchar>(i + 1, j) || ostu.at<uchar>(i + 1, j + 1))
				{
					dst.at<uchar>(i,j) = 255;
				}
			}
		}
	}

	return true;
}

/// 2013 Investigating the Power of Integral Histograms for Document Images, a Binarization Case Study
/// 采用积分直方图的方式进行加速
/// 参考积分图的方式计算局部直方图
/// 阈值采用OTSU方式得到，其他如中值亦可。
/// 根据作者论文，这里有几个默认参数：
/// 1、局部窗口最大值， 默认为图像最小边长
/// 2、位深大小，默认为8.即图像动态范围为2^8.
/// 3、金字塔层数，默认为5.即局部窗口变化为100%，50%,25%,12.5%,6.25%.
/// 4、阈值获取方式,默认otsu，其他方式可选。
/// NOTE:直接实现的算法过于耗时。
//bool Binarization_LOF(Mat image, Mat& dst)
//{
//	int nRadius = IVMIN(image.cols, image.rows) / 2;
//	int nHeight = image.rows;
//	int nWidth  = image.cols;
//	
//	vector<Mat> tmpdst;
//	
//	for (int iter = 0; iter < 5; iter++)
//	{
//		Mat result = Mat::zeros(nHeight, nWidth, CV_8UC1);
//
//		for (int i = 0; i < nHeight; i++)
//		{
//			int nTop = IVCLP(i - nRadius, 0, nHeight - 1);
//			int nBot = IVCLP(i + nRadius, 0, nHeight - 1);
//			for (int j = 0; j < nWidth; j++)
//			{
//				int nLeft = IVCLP(j - nRadius, 0, nWidth - 1);
//				int nRight = IVCLP(j + nRadius, 0, nWidth - 1);
//				Mat tmp = image(Range(nTop, nBot), Range(nLeft, nRight)).clone();
//				double thres = threshold(tmp, tmp, 0, 255, CV_THRESH_OTSU);
//				result.at<uchar>(i,j) = thres;
//			}
//		}
//
//		compare(image, result, result, CMP_GE);
//
//		tmpdst.push_back(result);
//
//		nRadius /= 2;
//	}
//
//	Mat result = Mat::ones(nHeight, nWidth, CV_8UC1);
//	for (int i = 0; i < nHeight; i++)
//	{
//		for (int j = 0; j < nWidth; j++)
//		{
//			if (tmpdst[0].at<uchar>(i,j) == 0
//				&& tmpdst[1].at<uchar>(i,j) == 0
//				&& tmpdst[2].at<uchar>(i,j) == 0
//				&& tmpdst[3].at<uchar>(i,j) == 0
//				&& tmpdst[4].at<uchar>(i,j) == 0)
//			{
//				result.at<uchar>(i,j) = 0;
//			}
//		}
//	}
//	result = result * 255;
//	
//	dst = result.clone();
//}

/// otsu+niblack二值化
void Binarization_ostu_niblack(Mat src, Mat &dst)
{
	Mat ostu, niblack;

	// otsu
	threshold(src, ostu, 0, 255, CV_THRESH_OTSU | CV_THRESH_BINARY_INV);

	vector<vector<Point> > contours;
	findContours(ostu.clone(), contours, CV_RETR_EXTERNAL, CV_CHAIN_APPROX_NONE);
	if (contours.size())
	{
		for (int i = 0; i < contours.size(); i++)
		{
			Rect cBoundingBox = boundingRect(contours[i]);

			if ((cBoundingBox.width <=2 && cBoundingBox.height <=2))
			{
				Point2f pt;
				double dbRet;

				for ( int m=cBoundingBox.x; m<cBoundingBox.x+cBoundingBox.width; m++ )
				{
					for ( int n=cBoundingBox.y; n<cBoundingBox.y+cBoundingBox.height; n++ )
					{
						if ( ostu.at<uchar>(n,m) == 255 )
						{
							pt.x = m;
							pt.y = n;

							dbRet = pointPolygonTest(contours[i],pt,false);
							if ( dbRet >=0 )
							{
								ostu.at<uchar>(n,m) = 0;
							}
						}
					}
				}
			}
		}
	}

	// niblack
	int r = 9;//min(src.rows, src.cols);
	Binarization_Niblack(src, niblack, r, r, 0.1);
	niblack = 255 - niblack;

	// 以ostu为种子点，对niblack进行漫水。
	dst = ostu.clone();

	// combine otsu + niblack.
	for (int i = 1; i < src.rows - 1; i++)
	{
		for (int j = 1; j < src.cols - 1; j++)
		{
			if (niblack.at<uchar>(i,j))
			{
				if (ostu.at<uchar>(i - 1, j - 1) || ostu.at<uchar>(i - 1, j) || ostu.at<uchar>(i - 1, j + 1)
					|| ostu.at<uchar>(i, j - 1) || ostu.at<uchar>(i, j) || ostu.at<uchar>(i, j + 1)
					|| ostu.at<uchar>(i + 1, j - 1) || ostu.at<uchar>(i + 1, j) || ostu.at<uchar>(i + 1, j + 1))
				{
					dst.at<uchar>(i,j) = 255;
				}
			}
		}
	}
}



}


