//#include "stdafx.h"
#include <Windows.h>
#include "Comm.h"
#include "LineSegAndRecog_form.h"
#include "SegmentAndRecgonition.h"
#include "LineTypePostProcessing_table_ocr.h"
#include "LineSpecialPostProssing.h"
#ifndef _MSC_VER
#include <boost/locale.hpp>
#endif
//#include "ImageUtility.h"
#include"OCR.h"//	NPNTR_IDCARD单字引擎
//#define NPNTR_ID
#ifdef _DEBUG
#pragma comment(lib,"LineTypePostProcess_newD.lib")
#pragma comment(lib,"libSegAndRecogD.lib")
//#pragma comment(lib,"UtilityD.lib")
#ifdef NPNTR_ID
#pragma comment (lib,"IDCard_NPNTR.lib")
#else
#pragma comment (lib, "OCREngineD.lib")
#endif
#else
#pragma comment(lib,"libSegAndRecog.lib")
#pragma comment(lib,"LineTypePostProcess_new.lib")
#ifdef NPNTR_ID
#pragma comment (lib,"IDCard_NPNTR.lib")
#else
#pragma comment (lib, "OCREngine.lib")
#endif
#endif

using namespace LineSpecialPostProssing_form;

using namespace LineTypePostProcessing_table_ocr;

using namespace SegAndRec_table_ocr;

struct MP_tpHandle
{
	long svmModel;
	long npntrHandle;
};

struct stHoriBoundary
{
	int up;
	int down;
};

struct stVertBoundary
{
	int left;
	int right;
};
struct npntr_ID_Engine
{
	OCR pEngine;
};

int ProcessAmount(long tHandle,const Mat& tsrcImg,const Mat& tBwImg,LineOcrResult& strResult);
bool ProcessName(long tHandles,const Mat& tsrcImg,const Mat& tBwImg,LineOcrResult& strResult);

//bool MergeCHChar(long hHandle,MyOcrEngine ocrFun,Mat &tImage,Mat &tBw,LineOcrResult &tOcrRectLine);
//void MergeRect(const SHAPE_RECT &tRect1,const SHAPE_RECT &tRect2,SHAPE_RECT &tRect3);
//void ComputeRect(const SHAPE_RECT &tRect,double &dbHeight,double &dbWidth,double &dbRatio,double &dbCenterX,double &dbCenterY);
//void StatisticOcrRet(const stOcrLineList &tOcrLineList,stStatisticOcrRet &tStatisticOcrRet,double dbMaxGap);
//double DataMean(const vector<double> &tArray);
//double DataStd(const vector<double> &tArray);

bool CmpAscendHeight(const Rect rect1,const Rect rect2)
{
	return (rect1.height < rect2.height);
}

bool CmpAscendX(const Rect rect1,const Rect rect2)
{
	return (rect1.x < rect2.x);
}

#ifdef _MSC_VER
void Ascii2WideString(const string& szStr, tstring& wszStr )
{
	if ( szStr.length() == 0 )
	{
		return;
	}

	int nLength = MultiByteToWideChar( CP_ACP, 0, szStr.c_str(), -1, NULL, NULL );
	if ( 0 == nLength )
	{
		return;
	}

	wszStr.resize(nLength);
	LPWSTR lpwszStr = new wchar_t[nLength];
	MultiByteToWideChar( CP_ACP, 0, szStr.c_str(), -1, lpwszStr, nLength );
	wszStr = lpwszStr;
	delete [] lpwszStr;
}
#endif
LINESEGANDRECOG_FORM_API long LineSegAndRecog_Init(string strPath)
{
	MP_tpHandle* mp_tpHandle = new MP_tpHandle;
	string tmpStr;
	long npntrHandle=-1;
#ifdef NPNTR_ID
	npntr_ID_Engine* tmpOCR = new npntr_ID_Engine;
	//OCR pOcr;
	tmpStr = strPath + "char_compact_11406classes_confd_a0.007104_confd_b19.984753.csp";
	tmpOCR->pEngine.loadModel(tmpStr.c_str());
	npntrHandle=(long)tmpOCR;
#else
	tmpStr = strPath + "/A11052Trn-filter.dic";
	npntrHandle = OCREngine_LoadDic(tmpStr);
	if(npntrHandle == 0)
		return 0;
	mp_tpHandle->npntrHandle = npntrHandle;
#endif
	string strmodelPath = strPath + "/PntrPuncEngModel0701.txt";
	long svmHandle = OCREngine_NCFEFeature_Init(strmodelPath);
	if(svmHandle == 0)
		return 0;

	mp_tpHandle->svmModel = svmHandle;

	long tHandles = (long)mp_tpHandle;
	return tHandles;
}

LINESEGANDRECOG_FORM_API void LineSegAndRecog_UnInit(long tHandles)
{
	if (tHandles <= 0)
	{
		return;
	}
	MP_tpHandle* mp_tpHandle = (MP_tpHandle*)tHandles;

	long npntrHandle = mp_tpHandle->npntrHandle;
	OCREngine_FreeDic(npntrHandle);

	long svmModel = mp_tpHandle->svmModel;
	OCREngine_NCFEFeature_Release(svmModel);
	if(mp_tpHandle->svmModel!=0)
		mp_tpHandle->svmModel = 0;

	if(mp_tpHandle != NULL)
		delete mp_tpHandle;
	mp_tpHandle = NULL;
}


struct stpuncRect
{
	int idx;
	Rect rect;
	tstring OcrResult;
	double dbConfi;
};

LINESEGANDRECOG_FORM_API int LineSegAndRecogForm(int method,long tHandles,int iType,Mat tsrcImg,Mat tBwImg,LineOcrResult& strResult)
{
	MP_tpHandle* tpHandles = (MP_tpHandle*)tHandles;
	long npntrHandle = tpHandles->npntrHandle;//NPNTR引擎
	long puncHandle = tpHandles->svmModel;//标点识别引擎

	MyOcrEngine p = OCREngine_Char;

	int dataSetType = 0;
	if(iType == 2)
		dataSetType = 1;
	else if(iType ==  CHAR_NUMPUNC)
		dataSetType = 1;


	//iType = 1,阿拉伯数字集合
	Mat srcImage_cpy = Mat::zeros(tsrcImg.rows+4,tsrcImg.cols+4,CV_8UC1);
	tsrcImg.copyTo(srcImage_cpy(Rect(2,2,tsrcImg.cols,tsrcImg.rows)));
	Mat tBwImg_cpy = Mat::zeros(tBwImg.rows+4,tBwImg.cols+4,CV_8UC1);
	tBwImg.copyTo(tBwImg_cpy(Rect(2,2,tBwImg.cols,tBwImg.rows)));

	bool bRet = LineSegAndReg(method,npntrHandle,p,dataSetType,srcImage_cpy,tBwImg_cpy,strResult);

//	string strtmpResult = "";
//	cout<<strResult.vecOcrRectResult.size()<<endl;
//	for(int i = 0; i < strResult.vecOcrRectResult.size(); i++)
//	{
////		wcout<<strResult.vecOcrRectResult[i].strResult<<endl;
//		strtmpResult += boost::locale::conv::utf_to_utf<char>(strResult.vecOcrRectResult[i].strResult.substr(0,1));
//	}
//	cout<<strtmpResult<<endl;

	vector<tstring> matchstr;
	switch(iType)
	{
	case CHAR_NUMPUNC:
		bRet = ProcessAmount(tHandles,srcImage_cpy,tBwImg_cpy,strResult);//数字+标点
		if(!bRet)
			return -1;
		break;
	case CHAR_CHNPUNC:
		bRet = ProcessName(tHandles,srcImage_cpy,tBwImg_cpy,strResult);//汉字+标点
		if(bRet)
			return -1;
		break;
	case CHAR_PURENUM:
		bRet = LineTypePostProcess(srcImage_cpy,tBwImg_cpy,npntrHandle,p,1,matchstr,strResult);//纯数字后处理
		if(bRet)
			return -1;
		break;
	case CHAR_PURECHN:
		bRet = LineTypePostProcess(srcImage_cpy,tBwImg_cpy,npntrHandle,p,16,matchstr,strResult);//纯汉字后处理
		if(bRet)
			return -1;
		break;
	case CHAR_NUMENG:
		bRet = LineTypePostProcess(srcImage_cpy,tBwImg_cpy,npntrHandle,p,3,matchstr,strResult);//数字+英文字母后处理
		if(bRet)
			return -1;
		break;
	case CHAR_CHNNUMPUNC:
		//bRet = LineTypePostProcess(srcImage_cpy,tBwImg_cpy,npntrHandle,p,3,matchstr,strResult);//汉字+数字+英文字母后处理
		/*bRet=*/
		//if(!bRet)
		//return -1;
	break;
	default:
		break;
	}

	return 0;
}


//LINESEGANDRECOG_FORM_API int LineSegAndRecogForm_ID(int method,long tHandles,int iType,Mat tsrcImg,Mat tBwImg,LineOcrResult& strResult)
//{
//	MP_tpHandle* tpHandles = (MP_tpHandle*)tHandles;
//	long npntrHandle = tpHandles->npntrHandle;//NPNTR引擎
//	long puncHandle = tpHandles->svmModel;//标点识别引擎
//
//	//MyOcrEngine2 p = OCR::charClassify;
//
//	int dataSetType = 0;
//	if(iType == 2)
//		dataSetType = 1;
//	else if(iType ==  CHAR_NUMPUNC)
//		dataSetType = 1;
//
//
//	//iType = 1,阿拉伯数字集合
//	Mat srcImage_cpy = Mat::zeros(tsrcImg.rows+4,tsrcImg.cols+4,CV_8UC1);
//	tsrcImg.copyTo(srcImage_cpy(Rect(2,2,tsrcImg.cols,tsrcImg.rows)));
//	Mat tBwImg_cpy = Mat::zeros(tBwImg.rows+4,tBwImg.cols+4,CV_8UC1);
//	tBwImg.copyTo(tBwImg_cpy(Rect(2,2,tBwImg.cols,tBwImg.rows)));
//
//	bool bRet = LineSegAndReg_ID(method,npntrHandle,dataSetType,srcImage_cpy,tBwImg_cpy,strResult);
//
//	//	string strtmpResult = "";
//	//	cout<<strResult.vecOcrRectResult.size()<<endl;
//	//	for(int i = 0; i < strResult.vecOcrRectResult.size(); i++)
//	//	{
//	////		wcout<<strResult.vecOcrRectResult[i].strResult<<endl;
//	//		strtmpResult += boost::locale::conv::utf_to_utf<char>(strResult.vecOcrRectResult[i].strResult.substr(0,1));
//	//	}
//	//	cout<<strtmpResult<<endl;
//
//	vector<tstring> matchstr;
//	switch(iType)
//	{
//	case CHAR_NUMPUNC:
//		bRet = ProcessAmount(tHandles,srcImage_cpy,tBwImg_cpy,strResult);//数字+标点
//		if(!bRet)
//			return -1;
//		break;
//	case CHAR_CHNPUNC:
//		bRet = ProcessName(tHandles,srcImage_cpy,tBwImg_cpy,strResult);//汉字+标点
//		if(bRet)
//			return -1;
//		break;
//	case CHAR_PURENUM:
//		//bRet = LineTypePostProcess(srcImage_cpy,tBwImg_cpy,npntrHandle,p,1,matchstr,strResult);//纯数字后处理
//		//if(bRet)
//		//	return -1;
//		break;
//	case CHAR_PURECHN:
//		//bRet = LineTypePostProcess(srcImage_cpy,tBwImg_cpy,npntrHandle,p,16,matchstr,strResult);//纯汉字后处理
//		//if(bRet)
//		//	return -1;
//		break;
//	case CHAR_NUMENG:
//		//bRet = LineTypePostProcess(srcImage_cpy,tBwImg_cpy,npntrHandle,p,3,matchstr,strResult);//数字+英文字母后处理
//		//if(bRet)
//		//	return -1;
//		break;
//	case CHAR_CHNNUMPUNC:
//		//bRet = LineTypePostProcess(tsrcImg,tBwImg,npntrHandle,p,3,matchstr,strResult);//汉字+数字+英文字母后处理
//		//if(!bRet)
//		//	return -1;
//		break;
//	default:
//		break;
//	}
//
//	return 0;
//}
bool remove_Amount_space(OcrRectResult data)
{
	return data.strResult == L"";
}

bool remove_Amount_unvalid(OcrRectResult data)
{
	return data.imgRect.tButtomRight.y == -1;
}


// 数据识别后处理功能模块。修改原有的处理方案。
// 数据识别包含两个步骤：1、判断是否存在标点符号‘，’‘.’；2、对可能存在标点的位置进行识别判断，主要为第一位和其他候选位；
// 如果标点的个数多于1个，则将排在前面的置为空，仅保留最后一个；同时如果最后一个的位置小雨字符个数-4，同样置为空，说明正确的小数点因为过小被剔除，人工添加；
// 实际测试时发现的数据有以下几种：1、（-）4321；2、（-）32.11；3、（-）322.1；4、（-）3.321.
// 消除了双字符粘连识别错误问题。
int ProcessAmount(long tHandles,const Mat& tsrcImg,const Mat& tBwImg,LineOcrResult& strResult)
{
	/// 异常判断
	if (strResult.vecOcrRectResult.size() == 0 || tsrcImg.empty() || tBwImg.empty())
		return -1;

	MP_tpHandle* tpHandles = (MP_tpHandle*)tHandles;
	long npntrHandle = tpHandles->npntrHandle;	//NPNTR引擎
	long puncHandle = tpHandles->svmModel;		//标点识别引擎

	int nRefWidth = 0;
	int nRefHeight = 0;
	int nCnt = 0;
	float fRefBot = 0;
	float fRefTop = 0;
	bool  bNeg = false;		// 负号存在与否的标记
	bool  bPlu = false;		// 标点存在与否的标记


	// 判断是否可能存在负号
	if (strResult.vecOcrRectResult[0].strResult == L"")
	{
		bNeg = true;
	}

	// 计算字符的参考高度和参考宽度
	for (int i = 1; i < strResult.vecOcrRectResult.size(); i++)
	{
		if (strResult.vecOcrRectResult[i].strResult != L"")
		{
			int nTmpWidth = strResult.vecOcrRectResult[i].imgRect.tButtomRight.x - strResult.vecOcrRectResult[i].imgRect.tTopLeft.x + 1;
			int nTmpHeight = strResult.vecOcrRectResult[i].imgRect.tButtomRight.y - strResult.vecOcrRectResult[i].imgRect.tTopLeft.y + 1;
			if (nTmpWidth <= nTmpHeight)
			{
				nRefWidth += nTmpWidth;
				nRefHeight += nTmpHeight;
				fRefBot += strResult.vecOcrRectResult[i].imgRect.tButtomRight.y;
				fRefTop += strResult.vecOcrRectResult[i].imgRect.tTopLeft.y;
				nCnt++;
			}
		}
	}

	if (nCnt)
	{
		fRefBot /= nCnt;
		fRefTop /= nCnt;

		for (int m = 0; m < strResult.vecOcrRectResult.size(); m++)
		{
			if (strResult.vecOcrRectResult[m].imgRect.tTopLeft.y > fRefBot || strResult.vecOcrRectResult[m].imgRect.tButtomRight.y < fRefTop)
			{
				strResult.vecOcrRectResult[m].imgRect.tButtomRight.y = -1;
			}
		}
	}

	strResult.vecOcrRectResult.erase(remove_if(strResult.vecOcrRectResult.begin(), strResult.vecOcrRectResult.end(), remove_Amount_unvalid), strResult.vecOcrRectResult.end());

	if (strResult.vecOcrRectResult.size() <= 0)
	{
		return -1;
	}

	// 对于负数，如-4，很容易导致粘连。需要根据字符的宽高比进行粘连判断。
	if (!bNeg && nCnt >= 3)
	{
		float fRatio = nRefWidth * 1.0 / nRefHeight;
		float fOneRatio = (strResult.vecOcrRectResult[0].imgRect.tButtomRight.x - strResult.vecOcrRectResult[0].imgRect.tTopLeft.x) * 1.0 / ( strResult.vecOcrRectResult[0].imgRect.tButtomRight.y - strResult.vecOcrRectResult[0].imgRect.tTopLeft.y);

		// 是否存在粘连的判别准则是宽高比异于其他的宽高比
		if (fOneRatio > fRatio * 1.4 && (strResult.vecOcrRectResult[0].imgRect.tButtomRight.x - strResult.vecOcrRectResult[0].imgRect.tTopLeft.x) > nRefWidth * 1.3 / nCnt)
		{
			Rect rightRect = Rect();
			rightRect.width = nRefWidth * 1.0 / nCnt + 0.5;
			rightRect.height = strResult.vecOcrRectResult[0].imgRect.tButtomRight.y - strResult.vecOcrRectResult[0].imgRect.tTopLeft.y + 1;
			rightRect.y = strResult.vecOcrRectResult[0].imgRect.tTopLeft.y;
			rightRect.x = strResult.vecOcrRectResult[0].imgRect.tButtomRight.x - rightRect.width;

			Rect leftRect = Rect();
			leftRect.y = rightRect.y;
			leftRect.height = rightRect.height;
			leftRect.x = strResult.vecOcrRectResult[0].imgRect.tTopLeft.x;
			leftRect.width = rightRect.x - leftRect.x - 1;

			//  right
			Mat charMat = tBwImg(rightRect);
			tstring tstrRes;
			long dmin[10];
			if (charMat.empty())
			{
				return -1;
			}
			OCREngine_Char(npntrHandle,1,charMat,tstrRes,dmin);

			// 当且仅当切分后字符的置信度较高时才有意义，否则没必要切分。
			if (dmin[0] > strResult.vecOcrRectResult[0].dbConfi[0] * 8000)
			{
				strResult.vecOcrRectResult[0].strResult = tstrRes;
				strResult.vecOcrRectResult[0].dbConfi[0] = dmin[0]/10000.0;
				strResult.vecOcrRectResult[0].imgRect.tTopLeft.x = rightRect.x;

				charMat = tBwImg(leftRect);
				if (charMat.empty())
				{
					return -1;
				}
				OCREngine_Char(npntrHandle,0,charMat,tstrRes,dmin);

				int score = 0;
				if (tstrRes == L"0" || tstrRes == L"1" || tstrRes == L"2" || tstrRes == L"3" || tstrRes == L"4"
					|| tstrRes == L"5" || tstrRes == L"6" || tstrRes == L"7" || tstrRes == L"8" || tstrRes == L"9"
					|| tstrRes == L"l" || tstrRes == L"B" || tstrRes == L"O")
				{
					score = 1;
				}

				// left
				vector<OcrRectResult>::iterator it = strResult.vecOcrRectResult.begin();
				OcrRectResult tmpResult;
				tmpResult.imgRect.tTopLeft.x = leftRect.x;
				tmpResult.imgRect.tTopLeft.y = leftRect.y;
				tmpResult.imgRect.tButtomRight.x = leftRect.br().x;
				tmpResult.imgRect.tButtomRight.y = leftRect.br().y;

				if (score)
				{
					if (tstrRes == L"l")
					{
						tstrRes = L"1";
					}
					if (tstrRes == L"B")
					{
						tstrRes = L"8";
					}
					if (tstrRes == L"O")
					{
						tstrRes = L"0";
					}

					tmpResult.dbConfi.push_back(dmin[0]/10000.0);
					tmpResult.strResult = tstrRes;
				}
				else if (tstrRes == L"-" || tstrRes == L"^" || tstrRes == L".")
				{
					tmpResult.dbConfi.push_back(dmin[0]/10000.0);
					tmpResult.strResult = L"-";
				}
				else
				{
					tmpResult.strResult = L"+";
					tmpResult.dbConfi.push_back(0.6);
				}

				strResult.vecOcrRectResult.insert(it,1,tmpResult);
			}
		}
	}

	// 因字符合并而导致的识别置信度低问题处理
	if (nCnt >= 3)
	{
		for (int i = 0; i < strResult.vecOcrRectResult.size(); i++)
		{
			if (strResult.vecOcrRectResult[i].dbConfi[0] < 0.2 && strResult.vecOcrRectResult[i].strResult != L"")
			{
				if ((strResult.vecOcrRectResult[i].imgRect.tButtomRight.x - strResult.vecOcrRectResult[i].imgRect.tTopLeft.x) < nRefWidth * 0.4 / nCnt
					&& (strResult.vecOcrRectResult[i].imgRect.tButtomRight.y - strResult.vecOcrRectResult[i].imgRect.tTopLeft.y) < nRefHeight * 0.4 / nCnt)
				{
					strResult.vecOcrRectResult[i].dbConfi[0] = 0;
					strResult.vecOcrRectResult[i].strResult = L"";
				}
				else if (strResult.vecOcrRectResult[i].imgRect.tButtomRight.x - strResult.vecOcrRectResult[i].imgRect.tTopLeft.x > nRefWidth * 1.3 / nCnt)
				{
					Rect leftRect = Rect();
					leftRect.x = strResult.vecOcrRectResult[i].imgRect.tTopLeft.x;
					leftRect.y = strResult.vecOcrRectResult[i].imgRect.tTopLeft.y;
					leftRect.width = (strResult.vecOcrRectResult[i].imgRect.tButtomRight.x - strResult.vecOcrRectResult[i].imgRect.tTopLeft.x)/2;
					leftRect.height = strResult.vecOcrRectResult[i].imgRect.tButtomRight.y - strResult.vecOcrRectResult[i].imgRect.tTopLeft.y;

					Rect rightRect = Rect();
					rightRect.width = leftRect.width;
					rightRect.height = leftRect.height;
					rightRect.x = strResult.vecOcrRectResult[i].imgRect.tButtomRight.x - rightRect.width + 1;
					rightRect.y = strResult.vecOcrRectResult[i].imgRect.tTopLeft.y;

					{
						Mat charLeftMat = tBwImg(leftRect);
						tstring tstrResLeft;
						long dminLeft[10];
						if (charLeftMat.empty())
						{
							return -1;
						}
						OCREngine_Char(npntrHandle,1,charLeftMat,tstrResLeft,dminLeft);

						Mat charRightMat = tBwImg(rightRect);
						tstring tstrResRight;
						long dminRight[10];
						if (charRightMat.empty())
						{
							return -1;
						}
						OCREngine_Char(npntrHandle,1,charRightMat,tstrResRight,dminRight);

						if ((dminRight[0] > strResult.vecOcrRectResult[i].dbConfi[0]*8000) && (dminLeft[0] > strResult.vecOcrRectResult[i].dbConfi[0]*8000) )
						{
							strResult.vecOcrRectResult[i].imgRect.tButtomRight.y = leftRect.br().y;
							strResult.vecOcrRectResult[i].dbConfi[0] = dminLeft[0]/10000.0;
							strResult.vecOcrRectResult[i].strResult = tstrResLeft;


							vector<OcrRectResult>::iterator it = strResult.vecOcrRectResult.begin() + i + 1;
							OcrRectResult tmpResult;
							tmpResult.dbConfi.push_back(dminRight[0]/10000.0);
							tmpResult.imgRect.tTopLeft.x = leftRect.x;
							tmpResult.imgRect.tTopLeft.y = leftRect.y;
							tmpResult.imgRect.tButtomRight.x = leftRect.br().x;
							tmpResult.imgRect.tButtomRight.y = leftRect.br().y;
							tmpResult.strResult = tstrResRight;
							strResult.vecOcrRectResult.insert(it,1,tmpResult);

						}
					}
				}
			}
		}
	}

	// 对可能存在的标点进行识别处理，只会有以下三种：“-”，“，”，“.”。
	vector<int> vecDotIndex;
	for(int i = 0; i < strResult.vecOcrRectResult.size() - 1; i++)
	{
		tstring rectResult = strResult.vecOcrRectResult[i].strResult.substr(0,1);
		if (rectResult == L"")
		{
			Rect rect;
			rect.x = strResult.vecOcrRectResult[i].imgRect.tTopLeft.x;
			rect.y = strResult.vecOcrRectResult[i].imgRect.tTopLeft.y;
			rect.width = strResult.vecOcrRectResult[i].imgRect.tButtomRight.x - rect.x + 1;
			rect.height = strResult.vecOcrRectResult[i].imgRect.tButtomRight.y - rect.y + 1;
			Mat charMat = tBwImg(rect);


			// 第一位：正负号判别,同时剔除掉异常位置的符号
			if(i==0)
			{	//if (rect.y > strResult.vecOcrRectResult[1].imgRect.tButtomRight.y)
				if (rect.br().y < (strResult.vecOcrRectResult[1].imgRect.tButtomRight.y * 0.25 + strResult.vecOcrRectResult[1].imgRect.tTopLeft.y * 0.75)
					|| rect.y > (strResult.vecOcrRectResult[1].imgRect.tButtomRight.y * 0.75 + strResult.vecOcrRectResult[1].imgRect.tTopLeft.y * 0.25))
				{
					continue;
				}
				tstring tstrRes;
				long dmin[10];
				if (charMat.empty())
				{
					return -1;
				}
				OCREngine_Char(npntrHandle,0,charMat,tstrRes,dmin);
				if(tstrRes == L"-" || tstrRes == L".")
				{
					strResult.vecOcrRectResult[i].dbConfi[0] = 0.99;
					strResult.vecOcrRectResult[i].strResult = L"-";
				}
				else
				{
					int charHeight = strResult.vecOcrRectResult[i].imgRect.tButtomRight.y - strResult.vecOcrRectResult[i].imgRect.tTopLeft.y;
					int charWidth = strResult.vecOcrRectResult[i].imgRect.tButtomRight.x - strResult.vecOcrRectResult[i].imgRect.tTopLeft.x;
					if(((double)charWidth)/charHeight>1.5)
					{
						strResult.vecOcrRectResult[i].dbConfi[0] = 0.6;
						strResult.vecOcrRectResult[i].strResult = L"-";
					}
					else
					{
						strResult.vecOcrRectResult[i].dbConfi[0] = 0.6;
						strResult.vecOcrRectResult[i].strResult = L"+";
					}
				}
			}
			else if(i == strResult.vecOcrRectResult.size()-3)
			{
				tstring tstrRes;
				long dmin[10];
				if (charMat.empty())
				{
					return -1;
				}
				OCREngine_Char(npntrHandle,0,charMat,tstrRes,dmin);
				if(tstrRes == L".")
				{
					strResult.vecOcrRectResult[i].dbConfi[0] = 0.99;
					strResult.vecOcrRectResult[i].strResult = L".";
				}
				else
				{
					strResult.vecOcrRectResult[i].dbConfi[0] = 0;
					strResult.vecOcrRectResult[i].strResult = L".";
				}
				vecDotIndex.push_back(i);
			}
			else
			{
				tstring tstrRes;
				long dmin[10];
				if (charMat.empty())
				{
					return -1;
				}
				OCREngine_Char(npntrHandle,0,charMat,tstrRes,dmin);
				if(tstrRes == L",")
				{
					strResult.vecOcrRectResult[i].dbConfi[0] = 0;
					strResult.vecOcrRectResult[i].strResult = L".";
				}
				else
				{
					strResult.vecOcrRectResult[i].dbConfi[0] = 0.99;
					strResult.vecOcrRectResult[i].strResult = L".";
				}
				vecDotIndex.push_back(i);
			}
		}
	}

	//// 最后两位的标点符号间距异常则全部剔除！！！
	/*if (vecDotIndex.size() > 1)
	{
		if (vecDotIndex[vecDotIndex.size() - 1] - vecDotIndex[vecDotIndex.size() - 2] == 4)
		{
			for (int i = 0; i < vecDotIndex.size() - 1; i++)
			{
				strResult.vecOcrRectResult[vecDotIndex[i]].strResult = L"";
			}
		}
		else
		{
			for (int i = 0; i < vecDotIndex.size() - 2; i++)
			{
				strResult.vecOcrRectResult[vecDotIndex[i]].strResult = L"";
			}

			strResult.vecOcrRectResult[vecDotIndex[vecDotIndex.size()-1]].strResult = L"";

			if (vecDotIndex[vecDotIndex.size() - 2] < strResult.vecOcrRectResult.size() - 4)
			{
				strResult.vecOcrRectResult[vecDotIndex[vecDotIndex.size() - 2]].strResult = L"";
			}
		}
	}

	if (vecDotIndex.size())
	{
		bPlu = true;

		if (vecDotIndex[vecDotIndex.size()-1] < strResult.vecOcrRectResult.size() - 4)
		{
			strResult.vecOcrRectResult[vecDotIndex[vecDotIndex.size()-1]].strResult = L"";
		}
	}*/
	//银行工资单日期点号判断 王博20170919(用于账单，代发工资单无日期)

	if (vecDotIndex.size() > 1)
	{
		if (vecDotIndex[vecDotIndex.size() - 1] - vecDotIndex[vecDotIndex.size() - 2] == 4)
		{
			for (int i = 0; i < vecDotIndex.size() - 1; i++)
			{
				strResult.vecOcrRectResult[vecDotIndex[i]].strResult = L"";
			}
		}
		else
		{
			for (int i = 0; i < vecDotIndex.size() - 2; i++)
			{
				strResult.vecOcrRectResult[vecDotIndex[i]].strResult = L"";
			}

			strResult.vecOcrRectResult[vecDotIndex[vecDotIndex.size()-1]].strResult = L"";

			if (vecDotIndex[vecDotIndex.size() - 2] < strResult.vecOcrRectResult.size() - 4)
			{
				strResult.vecOcrRectResult[vecDotIndex[vecDotIndex.size() - 2]].strResult = L"";
			}
		}
	}

	if (vecDotIndex.size())
	{
		bPlu = true;

		if (vecDotIndex[vecDotIndex.size()-1] < strResult.vecOcrRectResult.size() - 4)
		{
			strResult.vecOcrRectResult[vecDotIndex[vecDotIndex.size()-1]].strResult = L"";
		}
	}
	// 剔除噪点干扰
	if (strResult.vecOcrRectResult.size() > 1)
	{
		for (int i = 0; i < strResult.vecOcrRectResult.size(); i++)
		{
			if (strResult.vecOcrRectResult[i].dbConfi[0] < 0.01 && strResult.vecOcrRectResult[i].strResult != L"-" && strResult.vecOcrRectResult[i].strResult != L"." && strResult.vecOcrRectResult[i].strResult != L"+" )
			{
				if (i == 0)
				{
					int nRefHeight = strResult.vecOcrRectResult[i+1].imgRect.tButtomRight.y - strResult.vecOcrRectResult[i+1].imgRect.tTopLeft.y;
					int nCharHeight = strResult.vecOcrRectResult[i].imgRect.tButtomRight.y - strResult.vecOcrRectResult[i].imgRect.tTopLeft.y;
					if (nCharHeight < nRefHeight * 0.6)
					{
						strResult.vecOcrRectResult[i].strResult = L"";
					}
				}
				else if (i == strResult.vecOcrRectResult.size() - 1)
				{
					int nRefHeight = strResult.vecOcrRectResult[i-1].imgRect.tButtomRight.y - strResult.vecOcrRectResult[i-1].imgRect.tTopLeft.y;
					int nCharHeight = strResult.vecOcrRectResult[i].imgRect.tButtomRight.y - strResult.vecOcrRectResult[i].imgRect.tTopLeft.y;
					if (nCharHeight < nRefHeight * 0.6)
					{
						strResult.vecOcrRectResult[i].strResult = L"";
					}
				}
				else
				{
					int nLeftHeight = strResult.vecOcrRectResult[i-1].imgRect.tButtomRight.y - strResult.vecOcrRectResult[i-1].imgRect.tTopLeft.y;
					int nRightHeight = strResult.vecOcrRectResult[i+1].imgRect.tButtomRight.y - strResult.vecOcrRectResult[i+1].imgRect.tTopLeft.y;
					int nCharHeight =  strResult.vecOcrRectResult[i].imgRect.tButtomRight.y - strResult.vecOcrRectResult[i].imgRect.tTopLeft.y;
					if (nCharHeight < (nLeftHeight + nRightHeight) * 0.3)
					{
						strResult.vecOcrRectResult[i].strResult = L"";
					}
				}
			}
		}
	}

	vector<OcrRectResult>::iterator pos = strResult.vecOcrRectResult.begin();
	strResult.vecOcrRectResult.erase(remove_if(strResult.vecOcrRectResult.begin(), strResult.vecOcrRectResult.end(), remove_Amount_space), strResult.vecOcrRectResult.end());

	bool bDotExits = false;
	for (int i = 0; i < strResult.vecOcrRectResult.size(); i++)
	{
		if (strResult.vecOcrRectResult[i].strResult == L".")
		{
			bDotExits = true;
			break;
		}
	}

	// 对于未找到标点的数据采用其他方式进行标点的定位,
	if (strResult.vecOcrRectResult.size() >= 3 && !bDotExits && nCnt && bPlu)
	{
		int ResultSize = strResult.vecOcrRectResult.size() - 2;

		while (ResultSize > 0 && ResultSize > strResult.vecOcrRectResult.size() - 5)
		{
			int nTmpWidth = strResult.vecOcrRectResult[ResultSize + 1].imgRect.tTopLeft.x -strResult.vecOcrRectResult[ResultSize].imgRect.tButtomRight.x;
			int nTmpWidth2 = strResult.vecOcrRectResult[ResultSize].imgRect.tTopLeft.x - strResult.vecOcrRectResult[ResultSize - 1].imgRect.tButtomRight.x;

			//if (nTmpWidth > nRefHeight *0.6 / nCnt && nTmpWidth < nRefHeight * 1.6 / nCnt)
			if (nTmpWidth >= int(nRefWidth * 0.75 / nCnt) && nTmpWidth > nTmpWidth2)
			{
				vector<OcrRectResult>::iterator it = strResult.vecOcrRectResult.begin() + ResultSize + 1;
				OcrRectResult tmpResult;
				tmpResult.dbConfi.push_back(0.6);
				tmpResult.imgRect.tTopLeft.x = strResult.vecOcrRectResult[ResultSize].imgRect.tButtomRight.x;
				tmpResult.imgRect.tTopLeft.y = strResult.vecOcrRectResult[ResultSize].imgRect.tTopLeft.y;
				tmpResult.imgRect.tButtomRight.x = strResult.vecOcrRectResult[ResultSize+1].imgRect.tTopLeft.x;
				tmpResult.imgRect.tButtomRight.y = strResult.vecOcrRectResult[ResultSize+1].imgRect.tButtomRight.y;
				tmpResult.strResult = L".";
				strResult.vecOcrRectResult.insert(it,1,tmpResult);
				bDotExits = true;
				break;
			}
			ResultSize--;
		}
	}

	//if (bPlu && !bDotExits && strResult.vecOcrRectResult.size() >= 3)
	//{
	//	int ResultSize = strResult.vecOcrRectResult.size() - 2;
	//	vector<OcrRectResult>::iterator it = strResult.vecOcrRectResult.begin() + ResultSize;
	//	OcrRectResult tmpResult;
	//	tmpResult.dbConfi.push_back(0.0);
	//	tmpResult.imgRect.tTopLeft.x = strResult.vecOcrRectResult[ResultSize].imgRect.tButtomRight.x;
	//	tmpResult.imgRect.tTopLeft.y = strResult.vecOcrRectResult[ResultSize].imgRect.tTopLeft.y;
	//	tmpResult.imgRect.tButtomRight.x = strResult.vecOcrRectResult[ResultSize+1].imgRect.tTopLeft.x;
	//	tmpResult.imgRect.tButtomRight.y = strResult.vecOcrRectResult[ResultSize+1].imgRect.tButtomRight.y;
	//	tmpResult.strResult = _T(".");
	//	strResult.vecOcrRectResult.insert(it,1,tmpResult);
	//}

	return 0;
}


bool ProcessName(long tHandles,const Mat& tsrcImg,const Mat& tBwImg,LineOcrResult& strResult)
{
	MP_tpHandle* tpHandles = (MP_tpHandle*)tHandles;
	long npntrHandle = tpHandles->npntrHandle;//NPNTR引擎
	long puncHandle = tpHandles->svmModel;//标点识别引擎
	Mat srcImgCpy = tsrcImg.clone();
	Mat tBwImgCpy = tBwImg.clone();
	MyOcrEngine ocrFun = OCREngine_Char;

	bool bRet =  MergeCHChar(npntrHandle,ocrFun,srcImgCpy,tBwImgCpy,strResult);//合并中文字符
	//bool bRet = false;
	vector<stpuncRect> puncRects;
	for(int i = 0; i < strResult.vecOcrRectResult.size(); i++)
	{
		tstring rectResult = strResult.vecOcrRectResult[i].strResult.substr(0,1);

		if(!IsChineseChar(rectResult))//若识别结果不是数字，则默认为符号
		{

			Rect rect;
			rect.x = strResult.vecOcrRectResult[i].imgRect.tTopLeft.x;
			rect.y = strResult.vecOcrRectResult[i].imgRect.tTopLeft.y;
			rect.width = strResult.vecOcrRectResult[i].imgRect.tButtomRight.x - rect.x + 1;
			rect.height = strResult.vecOcrRectResult[i].imgRect.tButtomRight.y - rect.y + 1;
			stpuncRect tpuncRect;
			tpuncRect.idx = i;
			tpuncRect.rect = rect;

			Mat charMat = tBwImg(rect);
			Mat charMat_pad = Mat::zeros(charMat.rows+2,charMat.cols+2,CV_8UC1);
			charMat.copyTo(charMat_pad(Rect(1,1,charMat.cols,charMat.rows)));//对字符进行贴边处理
			//namedWindow("charMat_pad",0);
			//imshow("charMat_pad",charMat_pad);
			//waitKey();
			double label;
			double dbConfi;
			OCREngine_NCFEFeature_SVM(puncHandle,charMat_pad,label,dbConfi);//svm识别

			if(label == 12&&rectResult == L".")
			{
				tpuncRect.OcrResult = L".";
				tpuncRect.dbConfi = 1.0;
				//strResult.vecOcrRectResult[i].strResult = _T("");//如何输入姓名中间的点？？？
				strResult.vecOcrRectResult[i].dbConfi[0] = 1.0;
			}
			puncRects.push_back(tpuncRect);
		}
	}
	LineOcrResult newOCRResult;//新的识别结果

	vector<Mat> cutMats;
	Mat tBwImgCut = tBwImgCpy.clone();
	int newwidth = tBwImgCut.cols;
	int startx = 0;
	int endx = 0;
	for(int i = 0; i < puncRects.size(); i++)//将不带标点的字符块分块保存在cutMats中
	{
		if(puncRects[i].idx == 0||puncRects[i].idx == strResult.vecOcrRectResult.size()-1)
			return false;
		Rect rect;
		endx = puncRects[i].rect.x < tBwImgCut.cols ? puncRects[i].rect.x : tBwImgCut.cols;
		rect.x = startx > 0 ? startx : 0;
		rect.width = endx-startx;
		rect.y = 0;
		rect.height = tBwImgCpy.rows;

		Mat cutMat = tBwImgCpy(rect);
		cutMats.push_back(cutMat);
		//imshow("cutMat",cutMat);
		//waitKey();
		startx = strResult.vecOcrRectResult[puncRects[i].idx+1].imgRect.tTopLeft.x-1;
	}

	Rect rect1;
	rect1.x = startx-1 > 0 ? startx-1 : 0;
	rect1.y = 0;
	rect1.width = tBwImgCpy.cols - startx;
	rect1.height = tBwImgCpy.rows;
	Mat cutMat1 = tBwImgCpy(rect1);

	//imshow("cutMat1",cutMat1);
	//waitKey();
	cutMats.push_back(cutMat1);

	for(int i = 0; i < cutMats.size(); i++)//分别对这些字符块进行识别和后处理，将识别的结果结合标点的结果保存
	{
		LineOcrResult sliceResultList;
		MyOcrEngine p = OCREngine_Char;
		bool bRet1 = LineSegAndReg(0,npntrHandle,p,0,cutMats[i],cutMats[i],sliceResultList);
		if(!bRet1)
			return false;
		vector<tstring> matchstr;
		bRet1 = LineTypePostProcess(cutMats[i],cutMats[i],npntrHandle,p,16,matchstr,sliceResultList);//纯汉字后处理
		if(bRet1)
			return false;
		for(int j = 0; j < sliceResultList.vecOcrRectResult.size(); j++)
			newOCRResult.vecOcrRectResult.push_back(sliceResultList.vecOcrRectResult[j]);

		if(i != cutMats.size()-1)
		{
			OcrRectResult tOcrRectResult;
			tOcrRectResult.dbConfi.push_back(puncRects[i].dbConfi);
			tOcrRectResult.imgRect.tTopLeft.x = puncRects[i].rect.x;
			tOcrRectResult.imgRect.tTopLeft.y = puncRects[i].rect.y;
			tOcrRectResult.imgRect.tButtomRight.x = puncRects[i].rect.br().x;
			tOcrRectResult.imgRect.tButtomRight.y = puncRects[i].rect.br().y;
			tOcrRectResult.strResult = puncRects[i].OcrResult;
			newOCRResult.vecOcrRectResult.push_back(tOcrRectResult);
		}
	}
	strResult.vecOcrRectResult.clear();
	strResult.vecOcrRectResult = newOCRResult.vecOcrRectResult;
	return true;
}
